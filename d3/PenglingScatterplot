<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Scatterplot with D3</title>
    <script src="https://d3js.org/d3.v5.min.js"></script>
</head>
<body>

<script>
    // Load the penguins dataset
    const csvUrl = 'https://raw.githubusercontent.com/Rob-hub-lang/a2-DataVis-5Ways/main/penglings.csv';
    d3.csv(csvUrl)
        .then(function(data) {
            // Convert string values to numeric
            data.forEach(function(d) {
                d.flipper_length_mm = +d.flipper_length_mm;
                d.body_mass_g = +d.body_mass_g;
                d.bill_length_mm = +d.bill_length_mm;
            });

            // Set up SVG container
            var svgWidth = 800;
            var svgHeight = 500;
            var margin = { top: 20, right: 120, bottom: 60, left: 60};

            var svg = d3.select("body")
                .append("svg")
                .attr("width", svgWidth + margin.left + margin.right)
                .attr("height", svgHeight + margin.top + margin.bottom)
                .append("g")
                .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

            // Set up scales
            var xScale = d3.scaleLinear()
                .domain([d3.min(data, function(d) { return d.flipper_length_mm; }), d3.max(data, function(d) { return d.flipper_length_mm; })])
                .range([0, svgWidth - margin.right]);

            var yScale = d3.scaleLinear()
                .domain([d3.min(data, function(d) { return d.body_mass_g; }), d3.max(data, function(d) { return d.body_mass_g; })])
                .range([svgHeight, 0]);

            // Set up color scale for species
            var colorScale = d3.scaleOrdinal()
                .domain(data.map(function(d) { return d.species; }))
                .range(["darkorange", "darkgreen", "darkorchid"]);

            // Set up size scale for bill length
            var sizeScale = d3.scaleLinear()
                .domain([d3.min(data, function(d) { return d.bill_length_mm; }), d3.max(data, function(d) { return d.bill_length_mm; })])
                .range([5, 15]);

            // Create circles for each data point
            svg.selectAll("circle")
                .data(data)
                .enter()
                .append("circle")
                .attr("cx", function(d) { return xScale(d.flipper_length_mm); })
                .attr("cy", function(d) { return yScale(d.body_mass_g); })
                .attr("r", function(d) { return sizeScale(d.bill_length_mm); })
                .style("fill", function(d) { return colorScale(d.species); })
                .style("opacity", 0.8);

            // Add axes with ticks and labels
            svg.append("g")
                .attr("transform", "translate(0," + svgHeight + ")")
                .call(d3.axisBottom(xScale).ticks(10));

            svg.append("g")
                .call(d3.axisLeft(yScale).ticks(10));

            // Add labels
            svg.append("text")
                .attr("transform", "translate(" + (svgWidth / 2) + "," + (svgHeight + margin.top + 20) + ")")
                .style("text-anchor", "middle")
                .text("Flipper Length (mm)");

            svg.append("text")
                .attr("transform", "rotate(-90)")
                .attr("y", 0 - margin.left)
                .attr("x", 0 - (svgHeight / 2))
                .attr("dy", "1em")
                .style("text-anchor", "middle")
                .text("Body Mass (g)");

            // Legend
            var legend = svg.selectAll(".legend")
                .data(colorScale.domain())
                .enter().append("g")
                .attr("class", "legend")
                .attr("transform", function(d, i) {
                    return "translate(" + (svgWidth - margin.right + 60) + "," + (i * 20) + ")"; });

            legend.append("rect")
                .attr("x", 30)
                .attr("width", 18)
                .attr("height", 18)
                .style("fill", colorScale);

            legend.append("text")
                .attr("x", 24)
                .attr("y", 9)
                .attr("dy", ".35em")
                .style("text-anchor", "end")
                .text(function(d) { return d; });
        })
        .catch(function(error) {
            console.error('Error loading CSV file:', error);
        });
</script>

</body>
</html>
